#!/usr/bin/env bash

get_arg() {
    # todo: implement positional commands
    # local POSITIONAL=()

    local looking_for=()
    IFS=',' read -ra looking_for <<< "$1"
    shift
    # the first arg is the name that we are looking for
    # everything after that is the arg array we are parsing

    # The first value of looking for should also be the name
    # of the variable that the output will be stored in:
    local -n outvar=${looking_for[0]}

    while (( "$#" )); do
        case "$1" in
            -*|--*=)
                # echo "unsupported: $1 $2"
                # local opt_name="$1"
                local opt_value="$2"
                local opt_name="${1,,}"
                local stripped_name="${opt_name//-/_}"
                local strip_underscores="_"
                stripped_name="${stripped_name/$strip_underscores}"
                if [[ $stripped_name == "_"* ]]; then
                    # if it still starts with an underscore, split again
                    stripped_name="${stripped_name/$strip_underscores}"
                fi

                local found_match=false
                for match in ${looking_for[@]}; do                    
                    if [[ $stripped_name == $match ]]; then
                        # successfully matched
                        # if the opt value is empty, or its actually the
                        # next argument, then treat this as a boolean
                        if [[ -z $opt_value || $opt_value == "-"* ]]; then
                            # echo "true"
                            outvar=true
                        else
                            # otherwise return the actual value
                            # echo "$opt_value"
                            outvar="$opt_value"
                        fi

                        found_match=true
                        break
                    fi
                done

                if [[ $found_match == true ]]; then
                    break
                fi

                if [[ $opt_value == "-"* ]]; then
                    # this current option is a bool option
                    # so opt_value is actually the next option we
                    # want to parse, shift once
                    shift
                else
                    shift
                    shift
                fi
                ;;
            # *)
            #     POSITIONAL+=("$1")
            #     shift
            #     ;;
        esac
    done
}

# usage
# get_arg file_extension,e "$@"
#
# matches: "--file-extension <value>" or "-e <value>"
# to use the output:
# echo "what is my file extension? $file_extension"
# note in the usage, the long form will be the variable
# name, so short form must come after long form, if at all
