# prefixed ECS: exit code success
# or ECF: exit code failure
ecf_missing_input=1
ecf_failed_to_find_input_file=2
ecf_source_failure=3
ecf_invalid_input_file=4
ecf_failed_to_find_toplevel=5
ecf_failed_to_make_output_branch=6
ecf_failed_to_find_merge_branch=7

# variables related to documentation
# used in the print_usage function
doc_program_name="git split"
doc_synopsis=(
    "out <repo_file> [OPTIONS]"
    "in  <repo_file> [OPTIONS]"
)
doc_commands=(
    "out"
"Given a repo_file that defines how a repository should be split, git split out will take all paths defined in the repo_file and rewrite the repository's history into a new branch. This new branch will only include the history for the files specified in the repo_file.
.sp
You will then be left with a branch that can be considered as its own seperate repository (because it most likely doesn't share any common ancestor commits with your previous branch)."

    "in"
"Given a repo_file that defines how a repository should be split, git split in will take the remote_repo (or github.com/\$username/\$repo_name if remote_repo is not provided), and create a new empty branch based on the remote_repo. Then it will take all of the include and include_as paths defined in the repo_file and rewrite the repository's history on the branch that it just created. This new branch will only include the history for the files specified in the repo_file.
.sp
You will then be left with a branch that can be considered as its own seperate repository (because it most likely doesn't share any common ancestor commits with your previous branch)."
)
doc_global_options=(
    "-h, --help"
    "print help and exit"
    "--dry-run"
    "does not actually modify/do anything. Just outputs the commands that it would do without the --dry-run option present."
    "--output-branch <branch_name>"
    "the name of the branch that will be created"
)
doc_author="Nikita Skobov"
doc_author_email="skobo002@umn.edu"
doc_split_in_option_merge_branch='the '\
'merge branch option lets you split in '\
'from a local branch instead of a remote repository. '\
'<branch_name> must be a name of a branch that exists in your '\
'local repository.'
doc_split_in_options=(
    "Options for split in:"
    "--merge-branch <branch_name>"
    "$doc_split_in_option_merge_branch"
)
doc_custom_sections=(
    "doc_split_in_options"
)

# rfv: Repo File Variables
rfv_valid_variable_names=(
    "remote_repo"
    "remote_branch"
    "repo_name"
    "username"
    "include"
    "include_as"
    "exclude"
)
rfv_remote_repo=(
    "string"
    "optional"
    "A valid git repo uri. Can be a local file location, remote url, ssh url, etc. Only used for 'git split in'. It is used as the value of 'git pull <remote_repo>'. It is optional because by default, 'git split in' will use 'https://github.com/<username>/<repo_name>'"
)
rfv_remote_branch=(
    "string"
    "optional"
    "A valid remote branch name. Only used for 'git split in'. If provided, 'git split in' will pull from this remote branch instead of from master."
)
rfv_repo_name=(
    "string"
    "required"
    "The name of the repo. If running 'git split out', this is simply the name of the output branch created by default. For 'git split out', this is used for running 'git pull https://github.com/<username>/<repo_name>' if 'remote_repo' is not provided. Also for 'git split in', the output branch by default will be '<repo_name>-reverse'"
)
rfv_username=(
    "string"
    "conditional"
    "GitHub username. Only required for 'git split in' and if <remote_repo> is not provided. Used for the running 'git pull https://github.com/<username>/<repo_name'"
)
rfv_include=(
    "array|string"
    "conditional"
    "Includes the source repository files/directories exactly as is, without changing the paths. Specify a single include path as a string, otherwise multiple paths as an array of strings. Only used for 'git split out'. Only required if using 'git split out' and <include_as> is not provided. 'git split out' will take all of the include paths and rewrite the history as if those paths were the only thing in the repository."
)
rfv_include_as=(
    "array"
    "conditional"
    "An array of file paths, where every even path is a source path, and every odd path is a destination path. Includes the source repository paths as the destination paths. Only required if <include> is not provided. For 'git split out' the source paths are the paths relative to the root of your current branch, and the destination paths are what the source paths will be renamed to in the output branch. For 'git split in', it is the reverse. ie: the destination paths are the paths of the remote repository, and they will be renamed as the paths of the local repository."
)
rfv_exclude=(
    "array|string"
    "optional"
    "Exclude the source repository paths from being present in the destination. Only used for 'git split out'. Specify a single exclude path as a string, otherwise multiple paths as an array of strings. Note that the exclude paths get applied after the include paths. So you would first include the paths you want, and if there are sub-paths within the included path, you can explicitly exclude those that you do not wish to be present."
)
