# if compiling this file individually, use:
# import ./helpers.bsc
# otherwise helpers.bsc already included from git-split.bsc

# assumes that the input file has been sourced
# validates the variables that the input file has set.
# takes arg: $1 = the name of the file that was sourced.
# echoes out error message and returns false if invalid.
# otherwise returns true
input_file_valid_in() {
    if [[ -z $repo_name ]]; then
        echo "The file: $1 does not include a 'repo_name' variable"
        echo "To split in a subrepo, it must include a repo name"
        return 1
    elif [[ -z $merge_branch ]] && [[ -z $remote_repo ]] && [[ -z $repo_name || -z $username ]]; then
        echo "The file: $1 does not contain a remote source to pull from"
        echo "You must provide either a 'remote_repo' URL as a string"
        echo "Or a 'repo_name' and a 'username'"
        echo "Alternatively, you can provide a '--merge-branch' option"
        echo "to use a local branch to merge in from instead of merging in"
        echo "from a remote source"
        return 1
    elif [[ -z $include && -z $include_as ]]; then
        echo "The file: $1 does not have an 'include' or an 'include_as' variable"
        echo "To split in a subrepo, the input file must contain at least one include file/folder"
        return 1
    elif [[ ! -z $include_as ]] && ! is_array "include_as"; then
        echo "The file: $1 contains an include_as variable, but this variable is not an array"
        echo "To use include_as functionality, make sure it is an array"
        return 1
    elif [[ ! -z $include_as ]] && [[ ! $((${#include_as[@]} % 2)) -eq 0 ]]; then
        echo "include_as array provided, but it has an odd length"
        echo "include_as must be even so every even argument"
        echo "is the source file, and every odd argument"
        echo "is the desired destination"
        return 1
    fi
    return 0
}

# relies on previously defined variables:
# uses $merge_branch if set. If merge_branch
# is set, it does git merge $merge_branch
# otherwise it does
# git pull https://github.com/username/repo_name
populate_empty_branch_with_remote_commits() {
    # # populate the empty branch with the current master of the remote
    if [[ ! -z $merge_branch ]]; then
        # if user provided merge branch, use that instead of pull:
        if [[ ! -z $dry_run ]]; then
            echo "git merge $merge_branch"
        else
            git merge $merge_branch
        fi
    else
        if [[ ! -z $dry_run ]]; then
            echo "git pull https://github.com/$username/$repo_name"
        else
            git pull "https://github.com/$username/$repo_name"
        fi
    fi
}

# creates 2 repo split variables:
# repo_split_include, and
# repo_split_include_as. Then iterates over
# the user defined include, or include_as, or
# variables, and fills in
# the repo_split_* arrays as needed.
generate_repo_split_args_in() {
    repo_split_include=()
    repo_split_include_as=()

    # generate the repo_split_include array:
    generate_repo_split_include
    
    # generate the repo_split_include_as array:
    if [[ ! -z $include_as ]] && is_array "include_as"; then
        include_as_len=${#include_as[@]}
        include_as_index=0
        previous_i=""
        while [[ $include_as_index -lt $include_as_len ]]; do
            i=${include_as[include_as_index]}
            valid_include_keys=()
            include_key_index=0
            # get all keys of the include_as odd indices
            # these must be excluded from the directory part
            # of the next iteration
            while [[ $include_key_index -lt $include_as_len ]]; do
                if [[ $((include_key_index%2)) -eq 1 ]]; then
                    if [[ ${include_as[include_key_index]} != "$i" ]]; then
                        valid_include_keys+=("${include_as[include_key_index]}")
                    fi
                fi
                ((include_key_index+=1))
            done
            echo "valid include keys: ${valid_include_keys[@]}"

            if [[ $((include_as_index%2)) -eq 0 ]]; then
                # even, this will be used on the next iteration
                previous_i="$i"
            else
                if [[ $i == "" || $i == " " ]]; then
                    i="./"
                fi
                if [[ -d $i ]]; then
                    # iterate all files in i, including files that start with dot
                    for item in "${i%*/}"/* "${i%*/}"/.[^.]*; do
                        # remove the common prefix/suffic
                        # so the paths line up properly
                        remove_common=true
                        if [[ $item == "./"* ]]; then
                            item="${item:2}"
                            remove_common=false
                        fi
                        if [[ $item == ".git" ]]; then
                            # no need to iterate over the .git directory
                            continue
                        fi
                        all_files=$(get_all_files_from "$item")
                        for file in $all_files; do
                            if [[ $file == "ig"* ]]; then
                                continue
                            fi
                            if ! does_item_match_any_of "$file" "${repo_split_include[@]}" ; then
                                # it does not match any of the include=() strings
                                # so we will add a repo split arg:
                                # but we also need to check if this is one of the
                                # other include_as=() strings
                                # if it is, then it will be included 
                                if ! does_item_match_any_of "$file" "${valid_include_keys[@]}" ; then
                                    # echo "REPO SPLIT ARG: --path-rename $file:$previous_i/$file"
                                    echo "previous i: $previous_i, file: $file"
                                    input_file="$file"
                                    if [[ $remove_common == true ]]; then
                                        file="${file#*/}"
                                    fi

                                    if [[ "${previous_i: -1}" == "/" ]]; then
                                        # no need to add a slash, it already has one
                                        repo_split_include_as+=("$input_file:$previous_i$file")
                                    else
                                        repo_split_include_as+=("$input_file:$previous_i/$file")
                                    fi
                                fi
                            fi
                        done
                    done
                else
                    # echo "LOCAL $i IS A FILE, ADD REPO SPLIT ARGS AS IS:"
                    repo_split_include_as+=("$i:$previous_i")
                fi
            fi
            ((include_as_index+=1))
        done
    fi
}

# sources an input file that contains
# variables needed for splitting in
# a remote repository and (optionally) changing paths.
# back into this local repository.
# it uses previously defined variables:
# dry_run.
# If dry_run is defined, it will simply
# print out the commands instead of running them.
split_in() {
    # get a --merge-branch option if the user supplied it
    get_arg merge_branch,m "$@"

    if [[ -z $1 ]]; then
        echo "Missing required input file"
        echo ""
        print_usage_and_exit 1
    elif [[ ! -f $1 ]]; then
        echo "Failed to find input file: $1"
        echo ""
        print_usage_and_exit 2
    elif ! source_without_error "$1"; then
        echo "Failed to source input file: $1"
        echo "Is this a shell script file?"
        echo ""
        print_usage_and_exit 3
    elif ! input_file_valid_in "$1"; then
        echo ""
        print_usage_and_exit 4
    elif ! cd_into_toplevel_without_error; then
        echo ""
        print_usage_and_exit 6
    elif [[ ! -z $merge_branch ]] && ! branch_exists "$merge_branch"; then
        echo "You provided a merge branch: $merge_branch"
        echo "That does not exist."
        echo ""
        print_usage_and_exit 7
    fi

    # TODO: allow user to use an option --output-branch
    # instead of an env var
    local output_branch_name=${OUTPUT_BRANCH_NAME:-"$repo_name-reverse"}
    if [[ ! -z $dry_run ]]; then
        echo "git checkout --orphan $output_branch_name"
        echo "git rm -rf . > /dev/null"
    elif ! make_orphan_branch_without_error "$output_branch_name"; then
        echo ""
        print_usage_and_exit 5
    fi

    populate_empty_branch_with_remote_commits
    generate_repo_split_args_in
}
