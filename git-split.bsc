# git-split
# a custom git command to split out/in portions of a repository
# 
# Copyright (C) 2020, Nikita Skobov <nskobov.websites@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, specifically version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import ./lib/constants/exit_codes.bsc
import ./lib/constants/repo_file.bsc
import ./lib/constants/git_split.bsc

import {
    print_usage_and_exit
} from ./lib/helpers.bsc

import ./lib/split_out.bsc
import ./lib/split_in.bsc
import get_arg from ./lib/get_arg.bsc

# I like a nice little space between the command
# and the output :)
echo ""

# if running the command as
# git split X Y Z
# X = $1, Y = $2, Z = $3
# similarly for git-split:
# git-split X Y Z
# X = $1, Y = $2, Z = $3
# git takes care of removing the git command name
# from the arg list


subcommand="$1"
get_arg dry_run "$@"
get_arg version "$@"

if [[ ! -z $version ]]; then
    echo "$doc_program_name version $doc_version ($doc_last_updated)"
    echo "$doc_copyright"
    exit 0
fi

if [[ -z $subcommand ]]; then
    print_usage_and_exit $ecf_missing_input
elif [[
    $subcommand == "help" || \
    $subcommand == "-h" || \
    $subcommand == "--help"
]]; then
    print_usage_and_exit 0
elif [[ $subcommand == "out" ]]; then
    shift
    split_out "$@"
elif [[ $subcommand == "in" ]]; then
    shift
    split_in "$@"
fi
